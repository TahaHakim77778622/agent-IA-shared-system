#!/usr/bin/env python3
"""
Script de d√©marrage avec v√©rifications pr√©alables
"""

import sys
import os
import subprocess
import importlib.util
from pathlib import Path

def check_python_version():
    """V√©rifier la version de Python"""
    print("üêç V√©rification de la version Python...")
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ requis. Version actuelle:", sys.version)
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")
    return True

def check_dependencies():
    """V√©rifier les d√©pendances requises"""
    print("\nüì¶ V√©rification des d√©pendances...")
    required_packages = [
        'fastapi',
        'uvicorn',
        'sqlalchemy',
        'pymysql',
        'python-jose',
        'passlib',
        'python-dotenv',
        'pydantic'
    ]
    
    missing_packages = []
    for package in required_packages:
        if importlib.util.find_spec(package) is None:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå D√©pendances manquantes: {', '.join(missing_packages)}")
        print("üí° Installez-les avec: pip install -r requirements.txt")
        return False
    
    print("‚úÖ Toutes les d√©pendances sont install√©es")
    return True

def check_environment_file():
    """V√©rifier le fichier d'environnement"""
    print("\nüîß V√©rification du fichier d'environnement...")
    env_file = Path(".env")
    env_example = Path("env_example.txt")
    
    if not env_file.exists():
        if env_example.exists():
            print("‚ö†Ô∏è  Fichier .env non trouv√©")
            print("üí° Copiez env_example.txt vers .env et configurez vos param√®tres")
            return False
        else:
            print("‚ö†Ô∏è  Aucun fichier d'environnement trouv√©")
            return False
    
    print("‚úÖ Fichier .env trouv√©")
    return True

def check_database_connection():
    """V√©rifier la connexion √† la base de donn√©es"""
    print("\nüóÑÔ∏è  V√©rification de la connexion √† la base de donn√©es...")
    try:
        from database import SessionLocal
        db = SessionLocal()
        result = db.execute("SELECT 1")
        db.close()
        print("‚úÖ Connexion √† la base de donn√©es r√©ussie")
        return True
    except Exception as e:
        print(f"‚ùå Erreur de connexion √† la base de donn√©es: {e}")
        print("üí° V√©rifiez votre configuration DATABASE_URL dans .env")
        return False

def run_tests():
    """Ex√©cuter les tests de base"""
    print("\nüß™ Ex√©cution des tests de base...")
    try:
        result = subprocess.run([sys.executable, "test_models.py"], 
                              capture_output=True, text=True, cwd=os.getcwd())
        if result.returncode == 0:
            print("‚úÖ Tests de base r√©ussis")
            return True
        else:
            print("‚ùå Tests de base √©chou√©s")
            print("Sortie d'erreur:", result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution des tests: {e}")
        return False

def start_server():
    """D√©marrer le serveur FastAPI"""
    print("\nüöÄ D√©marrage du serveur FastAPI...")
    try:
        import uvicorn
        from config import settings
        
        print(f"üìç Serveur accessible sur: http://{settings.HOST}:{settings.PORT}")
        print(f"üìö Documentation: http://{settings.HOST}:{settings.PORT}/docs")
        print(f"üîó API: http://{settings.HOST}:{settings.PORT}")
        print("\nüîÑ Appuyez sur Ctrl+C pour arr√™ter le serveur")
        
        uvicorn.run(
            "main:app",
            host=settings.HOST,
            port=settings.PORT,
            reload=True,
            log_level=settings.LOG_LEVEL
        )
    except KeyboardInterrupt:
        print("\nüëã Serveur arr√™t√©")
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©marrage du serveur: {e}")

def main():
    """Fonction principale"""
    print("üîç V√©rifications pr√©alables au d√©marrage")
    print("=" * 50)
    
    checks = [
        check_python_version(),
        check_dependencies(),
        check_environment_file(),
        check_database_connection(),
        run_tests()
    ]
    
    if all(checks):
        print("\nüéâ Toutes les v√©rifications sont pass√©es!")
        start_server()
    else:
        print("\n‚ùå Certaines v√©rifications ont √©chou√©")
        print("üí° Corrigez les probl√®mes ci-dessus avant de red√©marrer")
        sys.exit(1)

if __name__ == "__main__":
    main() 